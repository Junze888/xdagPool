package cryptography

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/XDagger/xdagpool/xdago/secp256k1"
)

func TestEcdsaSign(t *testing.T) {
	pkBytes, err := hex.DecodeString("22a47fa09a223f2aa079edf85a7c2d4f87" +
		"20ee63e502ee2869afab7de234b80c")
	if err != nil {
		panic(err)
	}
	privKey := secp256k1.PrivKeyFromBytes(pkBytes)
	message := "test message"
	hash := sha256.Sum256([]byte(message))
	r, s := EcdsaSign(privKey, hash[:])
	fmt.Println(hex.EncodeToString(r[:]))
	fmt.Println(hex.EncodeToString(s[:]))
	pubKey := privKey.PubKey()

	ok := EcdsaVerify(pubKey, hash[:], r[:], s[:])
	if !ok {
		panic("verify failed")
	}

}

func TestEcdsaBlock(t *testing.T) {
	//  block data 1
	//  0000000000000000C19D56050000000023f65fcd960100000000000000000000
	//	00000000b159106faa3398f8912e6602c2c16c81402710174260e5b073000000
	//	000000009da76168f45b1213cfd1a65bae6f522eda9fedb94260e5b073000000
	//	687474703a2f2f74657374706f6f6c5f30315f657175616c2e636f6d00000000
	//	ec434dae63db0fc7487ed8588d3b175830080c3ed397119d8c40a304c1b07feb
	//	14915c453d6106da53a70a037ea5ee45949fa815715cada57ef595ba6d98e100
	//	501529da4373fbccb5336a0721ffa531d59d3685bd0e948649b646f0e5e7e3c9
	//	0000000000000000000000000000000000000000000000000000000000000000
	//	

	// blockStr := "0000000000000000C19D56050000000023f65fcd960100000000000000000000" +
	// 	"00000000b159106faa3398f8912e6602c2c16c81402710174260e5b073000000" +
	// 	"000000009da76168f45b1213cfd1a65bae6f522eda9fedb94260e5b073000000" +
	// 	"687474703a2f2f74657374706f6f6c5f30315f657175616c2e636f6d00000000" +
	// 	"ec434dae63db0fc7487ed8588d3b175830080c3ed397119d8c40a304c1b07feb" +
	// 	"0000000000000000000000000000000000000000000000000000000000000000" +
	// 	"0000000000000000000000000000000000000000000000000000000000000000" +
	// 	"0000000000000000000000000000000000000000000000000000000000000000" +
	// 	

	//  block data 2
	//  0000000000000000C19D5605000000002c465bcd960100000000000000000000
	//  00000000b159106faa3398f8912e6602c2c16c8140271017e04f8def39000000
	//  000000009da76168f45b1213cfd1a65bae6f522eda9fedb9e04f8def39000000
	//  687474703a2f2f74657374706f6f6c5f30315f657175616c2e636f6d00000000
	//  ec434dae63db0fc7487ed8588d3b175830080c3ed397119d8c40a304c1b07feb
	//  2670efe89eb8fcf8353c2eeb14bea7c17b2c38f34e213be26a9baaba3c66e4d8
	//  7c14202e34b92ef12c16ff87fe69546918b7f233d8c5da7178cab6934207377e
	

	blockStr := "0000000000000000C19D5605000000002c465bcd960100000000000000000000" +
		"00000000b159106faa3398f8912e6602c2c16c8140271017e04f8def39000000" +
		"000000009da76168f45b1213cfd1a65bae6f522eda9fedb9e04f8def39000000" +
		"687474703a2f2f74657374706f6f6c5f30315f657175616c2e636f6d00000000" +
		"ec434dae63db0fc7487ed8588d3b175830080c3ed397119d8c40a304c1b07feb" +
		"0000000000000000000000000000000000000000000000000000000000000000" +
		"0000000000000000000000000000000000000000000000000000000000000000" +
		"0000000000000000000000000000000000000000000000000000000000000000" +
		
	var comprePub [33]byte
	comprePub[0] = 0x02

	pb, _ := hex.DecodeString("ec434dae63db0fc7487ed8588d3b175830080c3ed397119d8c40a304c1b07feb")
	copy(comprePub[1:], pb)

	block, _ := hex.DecodeString(blockStr + hex.EncodeToString(comprePub[:]))
	hash := HashTwice(block)

	r, _ := hex.DecodeString("2670efe89eb8fcf8353c2eeb14bea7c17b2c38f34e213be26a9baaba3c66e4d8")
	s, _ := hex.DecodeString("7c14202e34b92ef12c16ff87fe69546918b7f233d8c5da7178cab6934207377e")

	pubKey, err := secp256k1.ParsePubKey(comprePub[:])
	if err != nil {
		panic(err)
	}

	ok := EcdsaVerify(pubKey, hash[:], r[:], s[:])
	if !ok {
		panic("verify failed")
	}
}
